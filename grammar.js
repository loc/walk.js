/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var grammar = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"File":3,"StmtList":4,"Module":5,"FunctionHeader":6,"FunctionList":7,",":8,"FunctionDecl":9,"FUNCTION":10,"OptName":11,"(":12,"ArgumentList":13,")":14,"VARIABLE":15,"Call":16,"Argument":17,"StmtBlock":18,"{":19,"}":20,"Stmt":21,"OptionalSemicolon":22,";":23,"VarDecl":24,"VarDeclList":25,"ControlStmt":26,"FOR":27,"Inequality":28,"GlobalVarDecl":29,"LocalVarDecl":30,"Assignment":31,"VAR":32,"VarDeclTail":33,"LValue":34,"=":35,"RValue":36,"Expr":37,"CONSTANT":38,"OPERATOR":39,"END_UNARY":40,"UNARY":41,"Object":42,"HashList":43,"KeyVal":44,":":45,"FieldAccess":46,".":47,"Variable":48,"STRING":49,"$accept":0,"$end":1},
terminals_: {2:"error",8:",",10:"FUNCTION",12:"(",14:")",15:"VARIABLE",19:"{",20:"}",23:";",27:"FOR",28:"Inequality",32:"VAR",35:"=",38:"CONSTANT",39:"OPERATOR",40:"END_UNARY",41:"UNARY",45:":",47:".",49:"STRING"},
productions_: [0,[3,1],[5,1],[7,3],[7,1],[6,5],[11,1],[11,0],[16,4],[13,3],[13,1],[13,0],[18,3],[4,2],[4,0],[21,2],[21,2],[21,2],[21,2],[21,1],[22,1],[22,0],[26,8],[9,2],[24,1],[24,1],[29,1],[30,2],[25,3],[33,3],[33,1],[31,3],[37,1],[37,1],[37,1],[37,3],[37,3],[37,2],[37,2],[42,3],[43,3],[43,1],[43,0],[44,3],[46,1],[46,3],[48,1],[34,1],[34,1],[34,1],[36,1],[36,1],[36,1],[17,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:this.$ = yy.File($$[$0]); return this.$;
break;
case 5:this.$ = {name: $$[$0-3], arguments: $$[$0-1]};
break;
case 6:this.$ = yytext
break;
case 7:this.$ = null;
break;
case 9:this.$ = $$[$0-2].concat($$[$0]);
break;
case 10:this.$= [$$[$0]];
break;
case 11:this.$ = [];
break;
case 12:this.$ = $$[$0-1];
break;
case 13:this.$ = $$[$0].concat($$[$0-1]);
break;
case 14:this.$ = [];
break;
case 15:this.$ = $$[$0-1]
break;
case 16:this.$ = $$[$0-1]
break;
case 17:this.$ = $$[$0-1]
break;
case 18:this.$ = $$[$0-1]
break;
case 23:this.$ = yy.Function($$[$0-1], $$[$0]);
break;
case 24:this.$ = $$[$0];
break;
case 25:this.$ = $$[$0];
break;
case 26: this.$ = yy.VariableDeclaration($$[$0], false);
break;
case 27: this.$ = yy.VariableDeclaration($$[$0], true);
break;
case 28: this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 29:this.$ = $$[$0-2].concat($$[$0]);
break;
case 30:this.$ = [$$[$0]];
break;
case 31:this.$ = yy.Assignment($$[$0-2], $$[$0]);
break;
case 32: this.$ = $$[$0]; 
break;
case 33:this.$ = $$[$0];
break;
case 34:this.$ = yy.Constant(yytext);
break;
case 35:this.$ = yy.BinaryExpr($$[$0-1], $$[$0-2], $$[$0]);
break;
case 36:this.$ = $$[$0-1];
break;
case 37:this.$ = yy.UnaryExpr($$[$0], $$[$0-1]);
break;
case 38:this.$ = yy.UnaryExpr($$[$0-1], $$[$0]);
break;
case 39:this.$ = yy.Object($$[$0-1]);
break;
case 40:this.$ = [$$[$0-2]].concat($$[$0]);
break;
case 41:this.$ = [$$[$0]];
break;
case 42:this.$ = [];
break;
case 43:this.$ = yy.HashEntry($$[$0-2], $$[$0]);
break;
case 44:this.$ = [$$[$0]];
break;
case 45:this.$ = $$[$0-2].concat($$[$0]);
break;
case 46:this.$ = yy.Variable($$[$0]);
break;
case 47:this.$ = $$[$0];
break;
case 48:this.$ = yy.String(yytext);
break;
case 49:this.$ = $$[$0];
break;
case 50:this.$ = $$[$0];
break;
case 51:this.$ = $$[$0];
break;
case 52:this.$ = $$[$0];
break;
case 53:this.$ = $$[$0];
break;
}
},
table: [{1:[2,14],3:1,4:2,6:9,9:4,10:[1,14],15:[1,10],16:5,19:[1,22],21:3,24:6,25:7,26:8,27:[1,13],29:11,30:12,31:15,32:[1,16],34:17,42:20,46:21,48:18,49:[1,19]},{1:[3]},{1:[2,1]},{1:[2,14],4:23,6:9,9:4,10:[1,14],15:[1,10],16:5,19:[1,22],20:[2,14],21:3,24:6,25:7,26:8,27:[1,13],29:11,30:12,31:15,32:[1,16],34:17,42:20,46:21,48:18,49:[1,19]},{1:[2,21],10:[2,21],15:[2,21],19:[2,21],20:[2,21],22:24,23:[1,25],27:[2,21],32:[2,21],49:[2,21]},{23:[1,26]},{8:[1,28],23:[1,27]},{23:[1,29]},{1:[2,19],10:[2,19],15:[2,19],19:[2,19],20:[2,19],27:[2,19],32:[2,19],49:[2,19]},{18:30,19:[1,31]},{8:[2,44],12:[1,32],14:[2,44],20:[2,44],23:[2,44],35:[2,44],39:[2,44],40:[2,44],47:[2,44]},{8:[2,24],14:[2,24],20:[2,24],23:[2,24]},{8:[2,25],14:[2,25],20:[2,25],23:[2,25]},{12:[1,33]},{11:34,12:[2,7],15:[1,35]},{8:[2,26],14:[2,26],20:[2,26],23:[2,26]},{15:[1,37],19:[1,22],31:36,34:17,42:20,46:21,48:18,49:[1,19]},{35:[1,38]},{8:[2,47],14:[2,47],20:[2,47],23:[2,47],35:[2,47],39:[2,47],40:[2,47]},{8:[2,48],14:[2,48],20:[2,48],23:[2,48],35:[2,48],39:[2,48],40:[2,48]},{8:[2,49],14:[2,49],20:[2,49],23:[2,49],35:[2,49],39:[2,49],40:[2,49]},{8:[2,46],14:[2,46],20:[2,46],23:[2,46],35:[2,46],39:[2,46],40:[2,46],47:[1,39]},{15:[1,42],20:[2,42],43:40,44:41},{1:[2,13],20:[2,13]},{1:[2,15],10:[2,15],15:[2,15],19:[2,15],20:[2,15],27:[2,15],32:[2,15],49:[2,15]},{1:[2,20],10:[2,20],15:[2,20],19:[2,20],20:[2,20],27:[2,20],32:[2,20],49:[2,20]},{1:[2,16],10:[2,16],15:[2,16],19:[2,16],20:[2,16],27:[2,16],32:[2,16],49:[2,16]},{1:[2,17],10:[2,17],15:[2,17],19:[2,17],20:[2,17],27:[2,17],32:[2,17],49:[2,17]},{15:[1,37],19:[1,22],29:44,31:15,33:43,34:17,42:20,46:21,48:18,49:[1,19]},{1:[2,18],10:[2,18],15:[2,18],19:[2,18],20:[2,18],27:[2,18],32:[2,18],49:[2,18]},{1:[2,23],8:[2,23],10:[2,23],14:[2,23],15:[2,23],19:[2,23],20:[2,23],23:[2,23],27:[2,23],32:[2,23],49:[2,23]},{4:45,6:9,9:4,10:[1,14],15:[1,10],16:5,19:[1,22],20:[2,14],21:3,24:6,25:7,26:8,27:[1,13],29:11,30:12,31:15,32:[1,16],34:17,42:20,46:21,48:18,49:[1,19]},{6:9,8:[2,11],9:49,10:[1,14],12:[1,55],13:46,14:[2,11],15:[1,10],16:53,17:47,19:[1,22],24:50,29:11,30:12,31:15,32:[1,16],34:52,36:48,37:51,38:[1,54],41:[1,56],42:20,46:21,48:18,49:[1,19]},{15:[1,37],19:[1,22],24:57,29:11,30:12,31:15,32:[1,16],34:17,42:20,46:21,48:18,49:[1,19]},{12:[1,58]},{12:[2,6]},{8:[2,27],14:[2,27],20:[2,27],23:[2,27]},{35:[2,44],47:[2,44]},{6:9,9:49,10:[1,14],12:[1,55],15:[1,10],16:53,19:[1,22],24:50,29:11,30:12,31:15,32:[1,16],34:52,36:59,37:51,38:[1,54],41:[1,56],42:20,46:21,48:18,49:[1,19]},{15:[1,60]},{20:[1,61]},{8:[1,62],20:[2,41]},{45:[1,63]},{8:[1,64],23:[2,28]},{8:[2,30],23:[2,30]},{20:[1,65]},{8:[1,67],14:[1,66]},{8:[2,10],14:[2,10]},{8:[2,53],14:[2,53]},{8:[2,50],14:[2,50],20:[2,50],23:[2,50]},{8:[2,51],14:[2,51],20:[2,51],23:[2,51]},{8:[2,52],14:[2,52],20:[2,52],23:[2,52],39:[1,68],40:[1,69]},{8:[2,32],14:[2,32],20:[2,32],23:[2,32],35:[1,38],39:[2,32],40:[2,32]},{8:[2,33],14:[2,33],20:[2,33],23:[2,33],39:[2,33],40:[2,33]},{8:[2,34],14:[2,34],20:[2,34],23:[2,34],39:[2,34],40:[2,34]},{12:[1,55],15:[1,10],16:53,19:[1,22],34:71,37:70,38:[1,54],41:[1,56],42:20,46:21,48:18,49:[1,19]},{12:[1,55],15:[1,10],16:53,19:[1,22],34:71,37:72,38:[1,54],41:[1,56],42:20,46:21,48:18,49:[1,19]},{23:[1,73]},{6:9,8:[2,11],9:49,10:[1,14],12:[1,55],13:74,14:[2,11],15:[1,10],16:53,17:47,19:[1,22],24:50,29:11,30:12,31:15,32:[1,16],34:52,36:48,37:51,38:[1,54],41:[1,56],42:20,46:21,48:18,49:[1,19]},{8:[2,31],14:[2,31],20:[2,31],23:[2,31]},{8:[2,45],14:[2,45],20:[2,45],23:[2,45],35:[2,45],39:[2,45],40:[2,45],47:[2,45]},{8:[2,39],14:[2,39],20:[2,39],23:[2,39],35:[2,39],39:[2,39],40:[2,39]},{15:[1,42],20:[2,42],43:75,44:41},{6:9,9:49,10:[1,14],12:[1,55],15:[1,10],16:53,19:[1,22],24:50,29:11,30:12,31:15,32:[1,16],34:52,36:76,37:51,38:[1,54],41:[1,56],42:20,46:21,48:18,49:[1,19]},{15:[1,37],19:[1,22],29:77,31:15,34:17,42:20,46:21,48:18,49:[1,19]},{1:[2,12],8:[2,12],10:[2,12],14:[2,12],15:[2,12],19:[2,12],20:[2,12],23:[2,12],27:[2,12],32:[2,12],49:[2,12]},{8:[2,8],14:[2,8],20:[2,8],23:[2,8],39:[2,8],40:[2,8]},{6:9,9:49,10:[1,14],12:[1,55],15:[1,10],16:53,17:78,19:[1,22],24:50,29:11,30:12,31:15,32:[1,16],34:52,36:48,37:51,38:[1,54],41:[1,56],42:20,46:21,48:18,49:[1,19]},{12:[1,55],15:[1,10],16:53,19:[1,22],34:71,37:79,38:[1,54],41:[1,56],42:20,46:21,48:18,49:[1,19]},{8:[2,37],14:[2,37],20:[2,37],23:[2,37],39:[2,37],40:[2,37]},{14:[1,80],39:[1,68],40:[1,69]},{8:[2,32],14:[2,32],20:[2,32],23:[2,32],39:[2,32],40:[2,32]},{8:[2,38],14:[2,38],20:[2,38],23:[2,38],39:[2,38]},{28:[1,81]},{8:[1,67],14:[1,82]},{20:[2,40]},{8:[2,43],20:[2,43]},{8:[2,29],23:[2,29]},{8:[2,9],14:[2,9]},{8:[2,35],14:[2,35],20:[2,35],23:[2,35],39:[2,35],40:[1,69]},{8:[2,36],14:[2,36],20:[2,36],23:[2,36],39:[2,36],40:[2,36]},{23:[1,83]},{19:[2,5]},{14:[1,84]},{18:85,19:[1,31]},{1:[2,22],10:[2,22],15:[2,22],19:[2,22],20:[2,22],27:[2,22],32:[2,22],49:[2,22]}],
defaultActions: {2:[2,1],35:[2,6],75:[2,40],82:[2,5]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 'WAITFOR'
break;
case 2:return 'THEN'
break;
case 3:return "FUNCTION"
break;
case 4:return "VAR"
break;
case 5:return "("
break;
case 6:return ")"
break;
case 7:return "{"
break;
case 8:return "}"
break;
case 9:return "="
break;
case 10:return ";"
break;
case 11:return ":"
break;
case 12:return ","
break;
case 13:return "FOR"
break;
case 14:return "OPERATOR"   
break;
case 15:return "OPERATOR"   
break;
case 16:return "OPERATOR"   
break;
case 17:return "OPERATOR"
break;
case 18:return "OPERATOR"
break;
case 19:return "OPERATOR" 
break;
case 20:return "OPERATOR"
break;
case 21:return "OPERATOR"
break;
case 22:return "OPERATOR"
break;
case 23:return "OPERATOR"
break;
case 24:return "OPERATOR"
break;
case 25:return "OPERATOR"
break;
case 26:return "OPERATOR"
break;
case 27:return "OPERATOR"
break;
case 28:return "OPERATOR"
break;
case 29:return "OPERATOR"
break;
case 30:return "OPERATOR"
break;
case 31:return "OPERATOR"
break;
case 32:return "OPERATOR"
break;
case 33:return "OPERATOR"
break;
case 34:return "OPERATOR"
break;
case 35:return "OPERATOR"
break;
case 36:return "OPERATOR"
break;
case 37:return "OPERATOR"
break;
case 38:return "OPERATOR"
break;
case 39:return "OPERATOR"
break;
case 40:return "OPERATOR"
break;
case 41:return "OPERATOR"
break;
case 42:return "OPERATOR"
break;
case 43:return "OPERATOR"
break;
case 44:return "OPERATOR"
break;
case 45:return "OPERATOR"
break;
case 46:return "OPERATOR"
break;
case 47:return "OPERATOR"
break;
case 48:return "END_UNARY"
break;
case 49:return "END_UNARY"
break;
case 50:return "UNARY"
break;
case 51:return "UNARY"
break;
case 52:return "STRING"
break;
case 53:return "STRING"
break;
case 54:return 'SINGLEQUOTE'
break;
case 55:return 'DOUBLEQUOTE'
break;
case 56:return "VARIABLE"
break;
case 57:return "CONSTANT"
break;
}
},
rules: [/^(?:\s+)/,/^(?:rk\.waitFor\b)/,/^(?:\.then\b)/,/^(?:function\b)/,/^(?:var\b)/,/^(?:\()/,/^(?:\))/,/^(?:\{)/,/^(?:\})/,/^(?:=)/,/^(?:;)/,/^(?::)/,/^(?:,)/,/^(?:for\b)/,/^(?:>)/,/^(?:<)/,/^(?:<=)/,/^(?:>>>)/,/^(?:>>)/,/^(?:<<)/,/^(?:>=)/,/^(?:==)/,/^(?:===)/,/^(?:!=)/,/^(?:!==)/,/^(?:\+=)/,/^(?:-=)/,/^(?:\*=)/,/^(?:\/=)/,/^(?:%=)/,/^(?:%)/,/^(?:<<=)/,/^(?:>>=)/,/^(?:>>>=)/,/^(?:\|=)/,/^(?:\^=)/,/^(?:&=)/,/^(?:&&)/,/^(?:\|\|)/,/^(?:\+)/,/^(?:-)/,/^(?:!)/,/^(?:~)/,/^(?:&)/,/^(?:\|)/,/^(?:\^)/,/^(?:\*)/,/^(?:\/)/,/^(?:\+\+)/,/^(?:--)/,/^(?:!)/,/^(?:~)/,/^(?:"(\\.|[^"])*")/,/^(?:'(\\.|[^''])*')/,/^(?:')/,/^(?:")/,/^(?:[a-zA-Z_$][0-9a-zA-Z_$]*)/,/^(?:\d+)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = grammar;
exports.Parser = grammar.Parser;
exports.parse = function () { return grammar.parse.apply(grammar, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}